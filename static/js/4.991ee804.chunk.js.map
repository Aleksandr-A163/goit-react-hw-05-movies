{"version":3,"sources":["components/SearchMovie/SearchMovie.js","views/SearchMovie.js","components/SearchMovie/SearchMovie.module.css"],"names":["SearchMovie","history","useHistory","location","useLocation","url","useRouteMatch","useState","inputQuery","setInputQuery","searchMovieArr","setSearchMovieArr","totalMovie","setTotalMovie","page","status","setStatus","inputRef","useRef","useEffect","newQuery","search","slice","length","a","api","newRequest","data","results","total_results","console","log","fetchData","nextFetch","prevState","className","s","Searchbar","SearchTitle","SearchForm","onSubmit","e","preventDefault","trim","push","current","placeholder","toast","warn","autoClose","theme","icon","type","SearchFormButton","SearchFormInput","name","ref","value","onChange","currentTarget","pattern","title","Loader","id","SearchList","map","item","backdrop_path","release_date","to","pathname","state","from","SearchListItem","src","alt","SearchListItemImage","SearchedMovieTitle","SearchFilms","module","exports"],"mappings":"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","file":"static/js/4.991ee804.chunk.js","sourcesContent":["import { useState, useRef, useEffect } from 'react';\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport { useHistory, useLocation} from 'react-router-dom';\r\nimport { ImSearch } from 'react-icons/im';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport s from './SearchMovie.module.css';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport * as api from '../../Service/Service-api';\r\n// import movieApiService from '../../Service/Service-api';\r\n// import infiniteScroll from '../../services/infinite-scroll-service';\r\nimport Loader from '../Loader/Loader';\r\n// import NoImage from '../../images/NoImage.PNG'\r\n\r\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w300';\r\n\r\nfunction SearchMovie() {\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const { url } = useRouteMatch();\r\n    const [inputQuery, setInputQuery] = useState('');\r\n    const [searchMovieArr, setSearchMovieArr] = useState([]);\r\n    const [totalMovie, setTotalMovie] = useState(0);\r\n    const [page, setPage] = useState(1);\r\n    const [status, setStatus] = useState('');\r\n\r\n    const inputRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        const newQuery = location.search.slice(7, location.search.length)\r\n\r\n        async function fetchData() {\r\n            if (!location.search) return;\r\n            setStatus('pending');\r\n            let newRequest;\r\n            try {\r\n                newRequest = await api.getMovie(newQuery, 1);\r\n                // newRequest = await movieApiService.fetchMovie(newQuery, 1);\r\n                \r\n                setSearchMovieArr([...newRequest.data.results]);\r\n                setTotalMovie(newRequest.data.total_results);\r\n                setStatus(() => {\r\n                    return (\r\n                        newRequest.data.results === 0 ?\r\n                            'rejected' :\r\n                            'resolved'\r\n                    )\r\n                });\r\n            }\r\n            catch (error) {\r\n                console.log('Error: request failed');\r\n                return setStatus('failed')\r\n            };\r\n        };\r\n\r\n        fetchData();\r\n    }, [location, history]);\r\n\r\n    const handleInputChange = e => setInputQuery(e.currentTarget.value);\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        if (inputQuery.trim() === '') {\r\n            toast.warn('Введи что-то!', {\r\n                autoClose: 2000,\r\n                theme: \"colored\",\r\n                icon: false,\r\n                }\r\n            );\r\n            return;\r\n        };\r\n        // setSearchQuery(inputQuery);\r\n        history.push({\r\n                    search: `query=${inputQuery}`,\r\n                })\r\n        inputRef.current.placeholder = inputQuery;\r\n        setInputQuery('');\r\n    };\r\n\r\n           // подгрузку последующих страниц, кроме первой\r\n\r\n    useEffect(() => {\r\n        if (page === 1) return;\r\n        const newQuery = location.search.slice(7, location.search.length)\r\n        async function nextFetch() {\r\n            let newRequest;\r\n            try {\r\n                newRequest = await api.getMovie(newQuery, page);\r\n                // newRequest = await movieApiService.fetchMovie(newQuery, page);\r\n                if (newRequest.data.results.length === 0) return;\r\n                setSearchMovieArr(prevState => [...prevState, ...newRequest.data.results]);\r\n                setTotalMovie(newRequest.data.total_results);\r\n            }\r\n            catch (error) {\r\n                console.log('Error: request failed');\r\n                return setStatus('failed')\r\n            };       \r\n        };\r\n        nextFetch();\r\n    }, [page, location]);\r\n\r\n    // endless Scroll\r\n\r\n    // useEffect(() => {\r\n    //     infiniteScroll(searchMovieArr, 600, 0.2, () => setPage(prevState => prevState + 1));\r\n    // }, [searchMovieArr]);\r\n\r\n    return (\r\n    <>\r\n        <div className={s.Searchbar} >\r\n            <span className={s.SearchTitle}>Search:</span>\r\n            <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n                <button type=\"submit\" className={s.SearchFormButton}>\r\n                    <ImSearch />\r\n                </button>\r\n                <label >\r\n                    <input\r\n                        className={s.SearchFormInput}\r\n                        type=\"text\"\r\n                        name=\"searchInput\"\r\n                        ref={inputRef}\r\n                        placeholder=\"Type movie name\"\r\n                        value={inputQuery}\r\n                        onChange={handleInputChange}\r\n                        pattern=\"^[0-9a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n                        title=\"Поисковое слово может состоять только из букв, апострофа, тире, цифр и пробелов.\"\r\n                    // required\r\n                    />\r\n                </label>\r\n            </form>\r\n        </div>\r\n        \r\n        {(status === 'pending') && <Loader />}\r\n\r\n        {(status === 'rejected') && <h2 className=\"galleryTitle\">По запросу ничего не найдено</h2>}\r\n        \r\n        {(status === 'failed') && <h2 className=\"galleryTitle\">Error: request failed. Нет соединения с интернетом или сервером</h2>}\r\n        \r\n        {(status === 'resolved' && location.search) && (\r\n            <>\r\n                <ul id=\"search-gallery\" className={s.SearchList}>\r\n                    {searchMovieArr.map(item => {\r\n                        const { id, backdrop_path, title, release_date } = item;\r\n                        return (\r\n                            <li key={id}  id={id}>\r\n                                <Link\r\n                                    to={{\r\n                                        pathname: `${url}/${id}`,\r\n                                        state: { from: location },\r\n                                    }}   \r\n                                    className={s.SearchListItem} >\r\n                                {backdrop_path && <img src={`${BASE_IMG_URL}${backdrop_path}`} alt={title} className={s.SearchListItemImage} />}\r\n                                {/* {!backdrop_path && <img src={NoImage} alt=\"NoImage\" />} */}\r\n                                <span className={s.SearchedMovieTitle}>{title}</span>\r\n                                <span className={s.SearchedMovieTitle}>relised: {release_date}</span>\r\n                                </Link>\r\n                            </li>\r\n                        );\r\n                    })}\r\n                </ul>\r\n            </> \r\n            )}\r\n            \r\n        {((page * 20 >= totalMovie) && (status === 'resolved')) && <h2 className=\"galleryTitle\">Запрос успешно выполнен</h2>}\r\n\r\n        <ToastContainer/>\r\n    </>\r\n        \r\n    )\r\n};\r\n \r\nSearchMovie.propTypes = {\r\n    searchQuery: PropTypes.string,\r\n};\r\n\r\nexport default SearchMovie;","import  SearchMovie  from '../components/SearchMovie/SearchMovie';\r\n\r\nexport default function SearchFilms() {\r\n    return (\r\n        <>\r\n            <SearchMovie/>\r\n        </>\r\n    )\r\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Searchbar\":\"SearchMovie_Searchbar__HT7QA\",\"SearchTitle\":\"SearchMovie_SearchTitle__275pU\",\"SearchForm\":\"SearchMovie_SearchForm__190dg\",\"SearchFormButton\":\"SearchMovie_SearchFormButton__2LZI1\",\"SearchFormInput\":\"SearchMovie_SearchFormInput__2aAkI\",\"SearchList\":\"SearchMovie_SearchList__1jfBZ\",\"SearchListItem\":\"SearchMovie_SearchListItem__2bc0L\",\"SearchListItemImage\":\"SearchMovie_SearchListItemImage__3B5Z4\",\"SearchedMovieTitle\":\"SearchMovie_SearchedMovieTitle__1jF3m\"};"],"sourceRoot":""}